name: Deploy Google Apps Script

on:
  push:
    branches:
      - content
    paths:
      - src/penguindb/apps_script/**
      - .github/workflows/deploy_apps_script.yml

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Required Packages
        run: |
          npm install -g @google/clasp
          npm install -g googleapis
          
      - name: Create Temporary Token Authentication
        env:
          CLIENT_ID: ${{ secrets.CLASP_CLIENT_ID }} 
          CLIENT_SECRET: ${{ secrets.CLASP_CLIENT_SECRET }}
          REFRESH_TOKEN: ${{ secrets.CLASP_REFRESH_TOKEN }}
        run: |
          # Create a Node.js script to fetch a new access token
          cat > fetch_token.js << 'EOF'
          const { google } = require('googleapis');
          const fs = require('fs');
          
          // Get environment variables
          const clientId = process.env.CLIENT_ID;
          const clientSecret = process.env.CLIENT_SECRET;
          const refreshToken = process.env.REFRESH_TOKEN;
          
          async function getAccessToken() {
            const oauth2Client = new google.auth.OAuth2(
              clientId,
              clientSecret,
              'urn:ietf:wg:oauth:2.0:oob'
            );
            
            oauth2Client.setCredentials({
              refresh_token: refreshToken
            });
            
            try {
              const { token } = await oauth2Client.getAccessToken();
              console.log('Successfully obtained new access token');
              
              // Create a minimal token file instead of the full .clasprc.json
              fs.writeFileSync('./token.json', JSON.stringify({ token }));
              
              return token;
            } catch (error) {
              console.error('Error refreshing access token:', error);
              process.exit(1);
            }
          }
          
          getAccessToken();
          EOF
          
          # Run the script to get a fresh token
          node fetch_token.js
          
      - name: Configure Clasp and Push Changes
        working-directory: ./src/penguindb/apps_script
        run: |
          # Check clasp configuration
          echo "Checking clasp configuration..."
          clasp setting
          
          # Set minimal authentication options for this command only
          export GOOGLE_APPLICATION_CREDENTIALS=../../token.json
          
          # Attempt to push using environment variable authentication
          echo "Pushing changes to Google Apps Script..."
          clasp push -f
          
          # Check if there are changes to Code.js that need API_GATEWAY_URL updated
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "Code.js"; then
            if git diff ${{ github.event.before }} ${{ github.sha }} -- Code.js | grep -q "API_GATEWAY_URL"; then
              echo "Creating new deployment version..."
              # Update the API Gateway URL in Code.js
              sed -i 's|API_GATEWAY_URL|${{ secrets.API_GATEWAY_URL }}|g' Code.js
              
              # Push again with updated URL
              clasp push -f
              
              # Create new deployment version
              DEPLOY_ID=$(clasp deployments | grep "Current" | awk '{print $2}')
              if [ -n "$DEPLOY_ID" ]; then
                clasp redeploy $DEPLOY_ID "Automatic update - ${{ github.sha }}"
              else
                clasp deploy -d "Automatic update - ${{ github.sha }}"
              fi
            fi
          fi 