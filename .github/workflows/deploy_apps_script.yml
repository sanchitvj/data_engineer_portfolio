name: Deploy Google Apps Script

on:
  push:
    branches:
      - content
    paths:
      - src/penguindb/apps_script/**
      - .github/workflows/deploy_apps_script.yml

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install @google/clasp globally
        run: npm install -g @google/clasp

      - name: Extract credentials and format new .clasprc.json
        env:
          CLASP_CLIENT_ID: ${{ secrets.CLASP_CLIENT_ID }} 
          CLASP_CLIENT_SECRET: ${{ secrets.CLASP_CLIENT_SECRET }}
          CLASP_REFRESH_TOKEN: ${{ secrets.CLASP_REFRESH_TOKEN }}
        run: |
          # Create a simple script to generate a properly formatted .clasprc.json
          cat > create_credentials.js << 'EOF'
          const fs = require('fs');
          
          // Create the expected structure
          const credentials = {
            "tokens": {
              "default": {
                "client_id": process.env.CLASP_CLIENT_ID || "1072944905499-vm2v2i5dvn0a0d2o4ca36i1vge8cvbn0.apps.googleusercontent.com",
                "client_secret": process.env.CLASP_CLIENT_SECRET || "v6V3fKV_zWU7iw1DrpO1rknX",
                "refresh_token": process.env.CLASP_REFRESH_TOKEN,
                "access_token": "ya29.placeholder-token-will-be-refreshed-automatically",
                "type": "authorized_user"
              }
            }
          };
          
          // Write to both locations for maximum compatibility
          fs.writeFileSync('src/penguindb/apps_script/.clasprc.json', JSON.stringify(credentials, null, 2));
          fs.writeFileSync(process.env.HOME + '/.clasprc.json', JSON.stringify(credentials, null, 2));
          
          console.log('Created .clasprc.json files in both local and home directories');
          console.log('Credentials structure (redacted):');
          const redactedCreds = JSON.parse(JSON.stringify(credentials));
          if (redactedCreds.tokens && redactedCreds.tokens.default) {
            redactedCreds.tokens.default.client_id = redactedCreds.tokens.default.client_id.substring(0, 8) + '...';
            redactedCreds.tokens.default.client_secret = redactedCreds.tokens.default.client_secret.substring(0, 8) + '...';
            redactedCreds.tokens.default.refresh_token = redactedCreds.tokens.default.refresh_token.substring(0, 8) + '...';
          }
          console.log(JSON.stringify(redactedCreds, null, 2));
          EOF
          
          # Run the script to create the credential files
          node create_credentials.js
          
          # Set proper permissions
          chmod 600 src/penguindb/apps_script/.clasprc.json
          chmod 600 ~/.clasprc.json
          
      - name: Navigate to Apps Script directory and push changes
        working-directory: ./src/penguindb/apps_script
        run: |
          # Validate clasp configuration
          echo "Checking clasp configuration..."
          clasp setting
          
          # Try push without explicit auth flag first (using ~/.clasprc.json)
          echo "Pushing changes to Google Apps Script..."
          clasp push -f
          
      - name: Create deployment (version) if needed
        working-directory: ./src/penguindb/apps_script
        run: |
          # Only create a new deployment/version if API_GATEWAY_URL has changed
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "Code.js"; then
            if git diff ${{ github.event.before }} ${{ github.sha }} -- Code.js | grep -q "API_GATEWAY_URL"; then
              echo "Creating new deployment version..."
              # Update the API Gateway URL in Code.js with the actual URL from secrets
              sed -i 's|API_GATEWAY_URL|${{ secrets.API_GATEWAY_URL }}|g' Code.js
              
              # Push again with the updated URL
              clasp push -f
              
              # Create new deployment version
              DEPLOY_ID=$(clasp deployments | grep "Current" | awk '{print $2}')
              if [ -n "$DEPLOY_ID" ]; then
                clasp redeploy $DEPLOY_ID "Automatic update - ${{ github.sha }}"
              else
                clasp deploy -d "Automatic update - ${{ github.sha }}"
              fi
            fi
          fi 