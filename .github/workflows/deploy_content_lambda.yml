name: Deploy Lambda Functions

on:
  push:
    branches:
      - content
    paths:
      - src/penguindb/lambda_function/**
      - src/penguindb/utils/**
      - docker_images/content_lambda_image.Dockerfile
      - .github/workflows/deploy_content_lambda.yml

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      api_handler_changed: ${{ steps.filter.outputs.api_handler_changed }}
      sqs_worker_changed: ${{ steps.filter.outputs.sqs_worker_changed }}
      status_checker_changed: ${{ steps.filter.outputs.status_checker_changed }}
      utils_changed: ${{ steps.filter.outputs.utils_changed }}
      dockerfile_changed: ${{ steps.filter.outputs.dockerfile_changed }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check changed files
        id: filter
        run: |
          # Check which files have changed
          API_HANDLER_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "src/penguindb/lambda_function/api_handler.py" && echo "true" || echo "false")
          SQS_WORKER_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "src/penguindb/lambda_function/sqs_worker.py" && echo "true" || echo "false")
          STATUS_CHECKER_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "src/penguindb/lambda_function/status_checker.py" && echo "true" || echo "false")
          UTILS_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "src/penguindb/utils/" && echo "true" || echo "false")
          DOCKERFILE_CHANGED=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "docker_images/content_lambda_image.Dockerfile" && echo "true" || echo "false")
          
          # Set outputs
          echo "api_handler_changed=$API_HANDLER_CHANGED" >> $GITHUB_OUTPUT
          echo "sqs_worker_changed=$SQS_WORKER_CHANGED" >> $GITHUB_OUTPUT
          echo "status_checker_changed=$STATUS_CHECKER_CHANGED" >> $GITHUB_OUTPUT
          echo "utils_changed=$UTILS_CHANGED" >> $GITHUB_OUTPUT
          echo "dockerfile_changed=$DOCKERFILE_CHANGED" >> $GITHUB_OUTPUT
          
          # Summary for debugging
          echo "API Handler changed: $API_HANDLER_CHANGED"
          echo "SQS Worker changed: $SQS_WORKER_CHANGED"
          echo "Status Checker changed: $STATUS_CHECKER_CHANGED"
          echo "Utils changed: $UTILS_CHANGED"
          echo "Dockerfile changed: $DOCKERFILE_CHANGED"

  build_and_deploy:
    needs: check_changes
    runs-on: ubuntu-latest
    if: ${{ needs.check_changes.outputs.api_handler_changed == 'true' || needs.check_changes.outputs.sqs_worker_changed == 'true' || needs.check_changes.outputs.status_checker_changed == 'true' || needs.check_changes.outputs.utils_changed == 'true' || needs.check_changes.outputs.dockerfile_changed == 'true' }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: content_lambda
          IMAGE_TAG: latest
        run: |
          docker buildx build --platform linux/amd64 --provenance=false -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker_images/content_lambda_image.Dockerfile --push .

      - name: Update API Handler Lambda
        if: ${{ needs.check_changes.outputs.api_handler_changed == 'true' || needs.check_changes.outputs.utils_changed == 'true' || needs.check_changes.outputs.dockerfile_changed == 'true' }}
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: content_lambda
          IMAGE_TAG: latest
        run: |
          echo "Updating API Handler Lambda..."
          aws lambda update-function-code --function-name api_handler --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Retry updating configuration
          for i in {1..3}; do
            aws lambda update-function-configuration --function-name api_handler --environment "Variables={SQS_QUEUE_URL=${{ secrets.SQS_QUEUE_URL }}}" && break || sleep 10;
          done

      - name: Update SQS Worker Lambda
        if: ${{ needs.check_changes.outputs.sqs_worker_changed == 'true' || needs.check_changes.outputs.utils_changed == 'true' || needs.check_changes.outputs.dockerfile_changed == 'true' }}
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: content_lambda
          IMAGE_TAG: latest
        run: |
          echo "Updating SQS Worker Lambda..."
          aws lambda update-function-code --function-name sqs_worker --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Retry updating configuration
          for i in {1..3}; do
            aws lambda update-function-configuration --function-name sqs_worker --environment "Variables={DYNAMODB_TABLE_NAME=content_data}" && break || sleep 10;
          done

      - name: Update Status Checker Lambda
        if: ${{ needs.check_changes.outputs.status_checker_changed == 'true' || needs.check_changes.outputs.utils_changed == 'true' || needs.check_changes.outputs.dockerfile_changed == 'true' }}
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: content_lambda
          IMAGE_TAG: latest
        run: |
          echo "Updating Status Checker Lambda..."
          aws lambda update-function-code --function-name status_checker --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Retry updating configuration
          for i in {1..3}; do
            aws lambda update-function-configuration --function-name status_checker --environment "Variables={DYNAMODB_TABLE_NAME=content_data}" && break || sleep 10;
          done
