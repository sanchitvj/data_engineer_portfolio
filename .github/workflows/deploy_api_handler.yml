name: Deploy API Handler Lambda

on:
  workflow_run:
    workflows: ["Content Docker Image"]
    branches: 
      - content
    types:
      - completed

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            changes:
              - 'src/penguindb/lambda_function/api_handler.py'
              - 'src/penguindb/utils/**'
              - 'docker_images/content_lambda_image.Dockerfile'
              - '.github/workflows/deploy_api_handler.yml'

  deploy:
    needs: check-changes
    if: ${{ needs.check-changes.outputs.should_deploy == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      # - name: Get latest image tag
      #   id: get-image
      #   run: |
      #     aws ecr describe-images --repository-name penguindb-lambda --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]' --output text
      #     echo "::set-output name=image_tag::$(aws ecr describe-images --repository-name content_lambda --query 'sort_by(imageDetails, &imagePushedAt)[-1].imageTags[0]' --output text)"

      - name: Deploy Lambda function
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: content_lambda
          IMAGE_TAG: latest
        run: |
          aws lambda update-function-code --function-name api_handler --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Retry Update Lambda Configuration
        run: |
          for i in {1..5}; do
            aws lambda update-function-configuration --function-name api_handler --environment "Variables={SQS_QUEUE_URL=${{ secrets.SQS_QUEUE_URL }}}" && break || sleep 15;
          done

      # - name: Update Lambda function
      #   run: |
      #     aws lambda update-function-code \
      #       --function-name api_handler \
      #       --image-uri ${{ secrets.ECR_REGISTRY }}/content_lambda:${{ steps.get-image.outputs.image_tag }}

      # - name: Wait for update to complete
      #   run: |
      #     aws lambda wait function-updated --function-name api_handler 